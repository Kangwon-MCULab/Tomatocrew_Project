/// <reference types="node" />
import * as fs from 'fs';
declare global  {
    interface Error {
        file?: File;
    }
}
export declare type Stats = fs.Stats;
export interface File {
    read(encoding?: string): Promise<string>;
    read(encoding: null): Promise<Buffer>;
}
export declare class File {
    readonly fsPath: string;
    constructor(fsPath: string);
    toString(): string;
    in(parent: File): boolean;
    initJson(defaultValue: Object): Promise<any>;
    basename(): string;
    filenameWithoutExt(): string;
    /**
     * ext with dot
     */
    ext(): string;
    reext(newext: string): File;
    children(): Promise<File[]>;
    sibling(filename: string): File;
    /**
     * Find not duplicated file name with index
     */
    findEmptyIndex(): Promise<File>;
    child(...filename: string[]): File;
    parent(): File;
    relativeFrom(parent: File): string | undefined;
    glob(pattern: string): Promise<File[]>;
    stat(): Promise<fs.Stats>;
    mtime(): Promise<number>;
    mkdir(): Promise<void>;
    mkdirp(): Promise<void>;
    lstat(): Promise<fs.Stats>;
    open(): Promise<string>;
    createWriteStream(): fs.WriteStream;
    exists(): Promise<boolean>;
    json(): Promise<any>;
    create(data: string): Promise<void>;
    createSync(data: string): void;
    unlink(): Promise<void>;
    quietUnlink(): Promise<void>;
    isDirectory(): Promise<boolean>;
}
